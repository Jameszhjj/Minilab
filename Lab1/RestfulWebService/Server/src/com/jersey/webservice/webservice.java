package com.jersey.webservice;

import java.io.BufferedReader;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;

import javax.ws.rs.Consumes;
import javax.ws.rs.GET;
import javax.ws.rs.POST;
import javax.ws.rs.Path;
import javax.ws.rs.Produces;
import javax.ws.rs.core.MediaType;
import javax.ws.rs.core.Response;

import org.json.JSONException;
import org.json.JSONObject;

import com.mysql.jdbc.Connection;
import com.mysql.jdbc.PreparedStatement;

// Plain old Java Object it does not extend as class or implements 
// an interface

// The class registers its methods for the HTTP GET request using the @GET annotation. 
// Using the @Produces annotation, it defines that it can deliver several MIME types,
// text, XML and HTML. 

// The browser requests per default the HTML MIME type.

//Sets the path to base URL + /hello
@Path("/webservice")
public class webservice {
///*
    @POST
    @Consumes(MediaType.APPLICATION_JSON)
    public Response json_restResponse(InputStream incomingData) {
        // json receiving variables
        String receivedString = "";
        JSONObject receivedJson = null;
        System.out.println("***testLine39*** print incomingData is"+incomingData);

        // configuration of data source connection 
        String driver = "com.mysql.jdbc.Driver";  
        String url = "jdbc:mysql://127.0.0.1:3306/bookinformations";  
        String usr = "root";
        String pwd = "zhjj";

        // connection variables
        PreparedStatement stmt = null;
        Connection conn = null;

        // temp variables
        // returnCode will be send to client and be present in the console view
        String returnCode = "SEARCH PROGRESS & RESULTS:";

        // receive the json data as receivedJson(JSONObject)
        try {
        	System.out.println(incomingData);
            BufferedReader in = new BufferedReader(new InputStreamReader(incomingData));
            String line = null;
            while ((line = in.readLine()) != null) {
                receivedString += line;
            }
        	try {
        		receivedJson = new JSONObject(receivedString);
                returnCode += "\n\n- receive json data successfully...";
        	} catch (JSONException e){
        		System.out.println("Error new Json - ");
        	}
        } catch (Exception e) {
            System.out.println("Error Parsing: - ");
        }

        // load JDBC driver
        try {
            Class.forName(driver).newInstance();
            returnCode += "\n\n- the driver is on...";
        } catch(Exception e) {
            e.printStackTrace();
        }

        // connect to mysql database "Library" and search for book with "title" = "Stardust"
        try {
            conn = (Connection) DriverManager.getConnection(url, usr, pwd);
            stmt = (PreparedStatement) conn.prepareStatement("select id from bookinformations where title='Java'");

            returnCode += "\n\n- select id from bookinformations where title='Java' is executed successfully...";

            // A table of data representing a database result set, which is
            // usually generated by executing a statement that queries the
            // database.
            ResultSet rs = stmt.executeQuery();
            while (rs.next()) {
                returnCode += ("\n\nid:\t" + rs.getString("id"));
                if (rs.getString("id").equals(receivedJson.getString("id"))) {
                    returnCode += "\t-that's it!";
                } else {
                    returnCode += ("\t-not the one I'm finding..." + rs.getString("id"));
                }
            }
        }
        catch (SQLException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        } catch (JSONException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} finally {
            // Close Statement and Connection
            if (stmt != null) {
                try {
                    stmt.close();
                } catch (SQLException e) {
                    // TODO Auto-generated catch block
                    e.printStackTrace();
                }
            }
            if (conn != null) {
                try {
                    conn.close();
                } catch (SQLException e) {
                    // TODO Auto-generated catch block
                    e.printStackTrace();
                }
            }
        }

        return Response.status(200).entity(returnCode).build();
    }


	@GET
	@Produces(MediaType.TEXT_PLAIN)
	public String sayPlainTextHello() {
        String returnCode = "Server is working!";

		return returnCode;
	}
/*
  // This method is called if TEXT_PLAIN is request
  @GET
  @Produces(MediaType.TEXT_PLAIN)
  public String sayPlainTextHello() {
    return "Hello Jersey";
  }

  // This method is called if XML is request
  @GET
  @Produces(MediaType.TEXT_XML)
  public String sayXMLHello() {
    return "<?xml version=\"1.0\"?>" + "<hello> Hello Jersey" + "</hello>";
  }

  // This method is called if HTML is request
  @GET
  @Produces(MediaType.TEXT_HTML)
  public String sayHtmlHello() {
    return "<html> " + "<title>" + "Hello Jersey" + "</title>"
        + "<body><h1>" + "Hello Jersey" + "</body></h1>" + "</html> ";
  }//*/

} 